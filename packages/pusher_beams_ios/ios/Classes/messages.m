// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface BeamsAuthProvider ()
+ (BeamsAuthProvider *)fromList:(NSArray *)list;
+ (nullable BeamsAuthProvider *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation BeamsAuthProvider
+ (instancetype)makeWithAuthUrl:(nullable NSString *)authUrl
    headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    queryParams:(nullable NSDictionary<NSString *, NSString *> *)queryParams
    credentials:(nullable NSString *)credentials {
  BeamsAuthProvider* pigeonResult = [[BeamsAuthProvider alloc] init];
  pigeonResult.authUrl = authUrl;
  pigeonResult.headers = headers;
  pigeonResult.queryParams = queryParams;
  pigeonResult.credentials = credentials;
  return pigeonResult;
}
+ (BeamsAuthProvider *)fromList:(NSArray *)list {
  BeamsAuthProvider *pigeonResult = [[BeamsAuthProvider alloc] init];
  pigeonResult.authUrl = GetNullableObjectAtIndex(list, 0);
  pigeonResult.headers = GetNullableObjectAtIndex(list, 1);
  pigeonResult.queryParams = GetNullableObjectAtIndex(list, 2);
  pigeonResult.credentials = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable BeamsAuthProvider *)nullableFromList:(NSArray *)list {
  return (list) ? [BeamsAuthProvider fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.authUrl ?: [NSNull null]),
    (self.headers ?: [NSNull null]),
    (self.queryParams ?: [NSNull null]),
    (self.credentials ?: [NSNull null]),
  ];
}
@end

@interface PusherBeamsApiCodecReader : FlutterStandardReader
@end
@implementation PusherBeamsApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [BeamsAuthProvider fromList:[self readValue]];
    case 129: 
      return [dynamic fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PusherBeamsApiCodecWriter : FlutterStandardWriter
@end
@implementation PusherBeamsApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BeamsAuthProvider class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[dynamic class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PusherBeamsApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PusherBeamsApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PusherBeamsApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PusherBeamsApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PusherBeamsApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PusherBeamsApiCodecReaderWriter *readerWriter = [[PusherBeamsApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void PusherBeamsApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PusherBeamsApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.start"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startInstanceId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(startInstanceId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_instanceId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startInstanceId:arg_instanceId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.getInitialMessage"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getInitialMessageWithCompletion:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(getInitialMessageWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getInitialMessageWithCompletion:^(NSDictionary<NSString *, dynamic *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.addDeviceInterest"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addDeviceInterestInterest:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(addDeviceInterestInterest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_interest = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addDeviceInterestInterest:arg_interest error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.removeDeviceInterest"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeDeviceInterestInterest:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(removeDeviceInterestInterest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_interest = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeDeviceInterestInterest:arg_interest error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.getDeviceInterests"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDeviceInterestsWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(getDeviceInterestsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<NSString *> *output = [api getDeviceInterestsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.setDeviceInterests"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDeviceInterestsInterests:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(setDeviceInterestsInterests:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_interests = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDeviceInterestsInterests:arg_interests error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.clearDeviceInterests"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearDeviceInterestsWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(clearDeviceInterestsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearDeviceInterestsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onInterestChanges"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onInterestChangesCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onInterestChangesCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onInterestChangesCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.setUserId"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserIdUserId:provider:callbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(setUserIdUserId:provider:callbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_userId = GetNullableObjectAtIndex(args, 0);
        BeamsAuthProvider *arg_provider = GetNullableObjectAtIndex(args, 1);
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setUserIdUserId:arg_userId provider:arg_provider callbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.clearAllState"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearAllStateWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(clearAllStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearAllStateWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onMessageReceivedInTheForeground"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onMessageReceivedInTheForegroundCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onMessageReceivedInTheForegroundCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onMessageReceivedInTheForegroundCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onNotificationTapped"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onNotificationTappedCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onNotificationTappedCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onNotificationTappedCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.stop"
        binaryMessenger:binaryMessenger
        codec:PusherBeamsApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(stopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CallbackHandlerApiCodecReader : FlutterStandardReader
@end
@implementation CallbackHandlerApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [BeamsAuthProvider fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface CallbackHandlerApiCodecWriter : FlutterStandardWriter
@end
@implementation CallbackHandlerApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BeamsAuthProvider class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface CallbackHandlerApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CallbackHandlerApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CallbackHandlerApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CallbackHandlerApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *CallbackHandlerApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    CallbackHandlerApiCodecReaderWriter *readerWriter = [[CallbackHandlerApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface CallbackHandlerApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation CallbackHandlerApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)handleCallbackCallbackId:(NSString *)arg_callbackId callbackName:(NSString *)arg_callbackName args:(NSArray *)arg_args completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.pusher_beams_platform_interface.CallbackHandlerApi.handleCallback"
      binaryMessenger:self.binaryMessenger
      codec:CallbackHandlerApiGetCodec()];
  [channel sendMessage:@[arg_callbackId ?: [NSNull null], arg_callbackName ?: [NSNull null], arg_args ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

