// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pusher.pusher_beams;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BeamsAuthProvider {
    private @Nullable String authUrl;

    public @Nullable String getAuthUrl() {
      return authUrl;
    }

    public void setAuthUrl(@Nullable String setterArg) {
      this.authUrl = setterArg;
    }

    private @Nullable Map<String, String> headers;

    public @Nullable Map<String, String> getHeaders() {
      return headers;
    }

    public void setHeaders(@Nullable Map<String, String> setterArg) {
      this.headers = setterArg;
    }

    private @Nullable Map<String, String> queryParams;

    public @Nullable Map<String, String> getQueryParams() {
      return queryParams;
    }

    public void setQueryParams(@Nullable Map<String, String> setterArg) {
      this.queryParams = setterArg;
    }

    private @Nullable String credentials;

    public @Nullable String getCredentials() {
      return credentials;
    }

    public void setCredentials(@Nullable String setterArg) {
      this.credentials = setterArg;
    }

    public static final class Builder {

      private @Nullable String authUrl;

      public @NonNull Builder setAuthUrl(@Nullable String setterArg) {
        this.authUrl = setterArg;
        return this;
      }

      private @Nullable Map<String, String> headers;

      public @NonNull Builder setHeaders(@Nullable Map<String, String> setterArg) {
        this.headers = setterArg;
        return this;
      }

      private @Nullable Map<String, String> queryParams;

      public @NonNull Builder setQueryParams(@Nullable Map<String, String> setterArg) {
        this.queryParams = setterArg;
        return this;
      }

      private @Nullable String credentials;

      public @NonNull Builder setCredentials(@Nullable String setterArg) {
        this.credentials = setterArg;
        return this;
      }

      public @NonNull BeamsAuthProvider build() {
        BeamsAuthProvider pigeonReturn = new BeamsAuthProvider();
        pigeonReturn.setAuthUrl(authUrl);
        pigeonReturn.setHeaders(headers);
        pigeonReturn.setQueryParams(queryParams);
        pigeonReturn.setCredentials(credentials);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(authUrl);
      toListResult.add(headers);
      toListResult.add(queryParams);
      toListResult.add(credentials);
      return toListResult;
    }

    static @NonNull BeamsAuthProvider fromList(@NonNull ArrayList<Object> list) {
      BeamsAuthProvider pigeonResult = new BeamsAuthProvider();
      Object authUrl = list.get(0);
      pigeonResult.setAuthUrl((String) authUrl);
      Object headers = list.get(1);
      pigeonResult.setHeaders((Map<String, String>) headers);
      Object queryParams = list.get(2);
      pigeonResult.setQueryParams((Map<String, String>) queryParams);
      Object credentials = list.get(3);
      pigeonResult.setCredentials((String) credentials);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PusherBeamsApiCodec extends StandardMessageCodec {
    public static final PusherBeamsApiCodec INSTANCE = new PusherBeamsApiCodec();

    private PusherBeamsApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BeamsAuthProvider.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return dynamic.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BeamsAuthProvider) {
        stream.write(128);
        writeValue(stream, ((BeamsAuthProvider) value).toList());
      } else if (value instanceof dynamic) {
        stream.write(129);
        writeValue(stream, ((dynamic) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PusherBeamsApi {

    void start(@NonNull String instanceId);

    void getInitialMessage(@NonNull Result<Map<String, dynamic>> result);

    void addDeviceInterest(@NonNull String interest);

    void removeDeviceInterest(@NonNull String interest);

    @NonNull 
    List<String> getDeviceInterests();

    void setDeviceInterests(@NonNull List<String> interests);

    void clearDeviceInterests();

    void onInterestChanges(@NonNull String callbackId);

    void setUserId(@NonNull String userId, @NonNull BeamsAuthProvider provider, @NonNull String callbackId);

    void clearAllState();

    void onMessageReceivedInTheForeground(@NonNull String callbackId);

    void onNotificationTapped(@NonNull String callbackId);

    void stop();

    /** The codec used by PusherBeamsApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PusherBeamsApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PusherBeamsApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PusherBeamsApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String instanceIdArg = (String) args.get(0);
                try {
                  api.start(instanceIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.getInitialMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Map<String, dynamic>> resultCallback =
                    new Result<Map<String, dynamic>>() {
                      public void success(Map<String, dynamic> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getInitialMessage(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.addDeviceInterest", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String interestArg = (String) args.get(0);
                try {
                  api.addDeviceInterest(interestArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.removeDeviceInterest", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String interestArg = (String) args.get(0);
                try {
                  api.removeDeviceInterest(interestArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.getDeviceInterests", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<String> output = api.getDeviceInterests();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.setDeviceInterests", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> interestsArg = (List<String>) args.get(0);
                try {
                  api.setDeviceInterests(interestsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.clearDeviceInterests", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.clearDeviceInterests();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onInterestChanges", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String callbackIdArg = (String) args.get(0);
                try {
                  api.onInterestChanges(callbackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.setUserId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String userIdArg = (String) args.get(0);
                BeamsAuthProvider providerArg = (BeamsAuthProvider) args.get(1);
                String callbackIdArg = (String) args.get(2);
                try {
                  api.setUserId(userIdArg, providerArg, callbackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.clearAllState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.clearAllState();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onMessageReceivedInTheForeground", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String callbackIdArg = (String) args.get(0);
                try {
                  api.onMessageReceivedInTheForeground(callbackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.onNotificationTapped", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String callbackIdArg = (String) args.get(0);
                try {
                  api.onNotificationTapped(callbackIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.PusherBeamsApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.stop();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class CallbackHandlerApiCodec extends StandardMessageCodec {
    public static final CallbackHandlerApiCodec INSTANCE = new CallbackHandlerApiCodec();

    private CallbackHandlerApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BeamsAuthProvider.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BeamsAuthProvider) {
        stream.write(128);
        writeValue(stream, ((BeamsAuthProvider) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class CallbackHandlerApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public CallbackHandlerApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by CallbackHandlerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return CallbackHandlerApiCodec.INSTANCE;
    }
    public void handleCallback(@NonNull String callbackIdArg, @NonNull String callbackNameArg, @NonNull List<Object> argsArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.pusher_beams_platform_interface.CallbackHandlerApi.handleCallback", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(callbackIdArg, callbackNameArg, argsArg)),
          channelReply -> callback.reply(null));
    }
  }
}
